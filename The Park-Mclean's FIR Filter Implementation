# standard bookkeeping
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from IPython.display import Audio, display
from ipywidgets import interactive, fixed

def MSE_fit(A, B, order):
    if order < 3:
        raise ValueError("order is too small, we need at least 3")
    
    # interpolation points always one more than the order of the interpolator
    pts = order+1
    # split number of interpolation points across intervals proportionately 
    #  with the length of each interval 
    ptsA = int(pts * A / (A+(1-B)))
    if ptsA < 2:
        ptsA = 2
    ptsB = pts - ptsA
    
    # for the MSE fit, place a point at each interval edge and distribute the rest
    #  (if any) evenly over the interval
    x = np.concatenate((
        np.arange(0, ptsA) * (A / (ptsA-1)),
        B + np.arange(0, ptsB) * ((1-B) / (ptsB-1))            
        ))
    y = np.concatenate((
        np.ones(ptsA),
        np.zeros(ptsB)            
        ))
    
    # now just solve the linear interpolation problem
    p = np.poly1d(np.polyfit(x, y, order))
    return p, x, y
    
def MSE_fit_show(A=0.4, B=0.6, order=10):
    p, x, y = MSE_fit(A, B, order)
    
    t = np.linspace(0, 1, 100)
    lims = [(0,1,-.5,1.5), (0,A,0.8,1.2), (B,1,-0.2,0.2)]
    for n, r in enumerate(lims):
        plt.subplot(1,3,n+1)
        plt.plot((0,A), (1,1), 'red', 
                 (B,1), (0,0), 'red',  
                 x, y, 'oy', 
                 t, p(t), '-')
        plt.xlim(r[0], r[1])
        plt.ylim(r[2], r[3]) 
def MSE_fit_show(A=0.4, B=0.6, order=10):
    p, x, y = MSE_fit(A, B, order)
    
    t = np.linspace(0, 1, 100)
    lims = [(0,1,-.5,1.5), (0,A,0.8,1.2), (B,1,-0.2,0.2)]
    for n, r in enumerate(lims):
        plt.subplot(1,3,n+1)
        plt.plot((0,A), (1,1), 'red', 
                 (B,1), (0,0), 'red',  
                 x, y, 'oy', 
                 t, p(t), '-')
        plt.xlim(r[0], r[1])
        plt.ylim(r[2], r[3]) 
v = interactive(MSE_fit_show, order=(3,30), A=(0.0, 0.5), B=(0.5, 1.0))
display(v)

def find_error_extrema(p, A, B):
    intervals = {
        (0, A): 1, 
        (B, 1): 0
    }
    loc = [] # locations of the extrema
    err = [] # values of the extrema
    for rng, val in intervals.items():
        # we don't need enormous precision, 100 points per interval will do
        t = np.linspace(rng[0], rng[1], 100)
        y = val - p(t) # error values
        # this finds all the points where the error changes sign:
        ix = np.diff(np.sign(np.diff(y))).nonzero()[0] + 1 # local min+max
        loc = np.hstack((loc, t[0], t[ix], t[-1]))
        err = np.hstack((err, y[0], y[ix], y[-1]))
    return loc, err
 
 A = 0.4
B = 0.6
p, x, y = MSE_fit(A, B, 8)

loc, err = find_error_extrema(p, 0.4, 0.6)

t = np.linspace(0, 1, 100)
plt.plot(loc, p(loc), 'or', t, p(t), '-')
plt.plot((0,A), (1,1), 'red', 
         (B,1), (0,0), 'red',  
         t, p(t), '-',
         loc, p(loc), 'or');
