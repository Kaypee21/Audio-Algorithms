import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import IPython
from scipy.io import wavfile
plt.rcParams["figure.figsize"] = (14,4)

Fs, x = wavefile.read("piano.wav")
IPython.display.Audio(x, rate=fs)

#incase of stereo to mono for plotting purpose
for i in range(len(x)):
    x[i]= x[i][0]/2 + x[i][1]/2;
    


X = np.fft.fft((x));


plt.stem(abs(X));
len(x)

def dft_shift(X):
    N = len(X)
    if (N%2 == 0): #for even length signals, num of samples is assymetric, i.e (N/2 and N/2 +1)
        return np.arange(-int(N/2),int(N/2) + 1), np.concatenate((X[int(N/2):], X[:int(N/2)+1]))
    else:          #for odd length signals, num of samples is symmetric about (N+1)/2                
        return np.arange(-int((N-1)/2), int(N-1)/2 + 1), np.concatenate((X[int((N+1)/2):], X[:int((N+1)/2)]))
 
 def dft_map(X,fs, shift=True):
    resolution = float(Fs)/ len(X)
    if shift:
        n, Y = dft_shift(X)
    else:
        Y = X
        n = np.arange(0, len(Y))
    f = n*resolution
    return f, Y
    
n, y = dft_shift(X);
plt.stem(n, abs(y));



X = np.fft.fft(z);
f, y = dft_map(X, Fs, shift=False)
plt.plot(f[:2000], abs(y[:2000]));

dft_resolution = float(Fs)/len(x)
print("DFT resolution is", dft_resolution)
ix = np.argmax(abs(y[:max_range]))
pitch = f[ix]
print("the note has a pitch of", pitch, "Hz")

    

    


