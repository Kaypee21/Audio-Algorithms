%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
plt.rcParams["figure.figsize"] = (14,4)
def dft_matrix(N):
    a = np.expand_dims(np.arange(N), 0)
    
    W = np.exp(-2j*(np.pi/N)*(a.T*a))
    
    return W
x = np.array([5,7,9])

N = len(x)
W = dft_matrix(N);

#DFT

X = np.dot(W,x)

#inverse DFT

x_hat = np.dot(W.T.conjugate(), X)/N

print(x-x_hat)

#error clearly not zero
#Using FFT to minimize error:
#Consider Step Function
N = 128
x = np.zeros(N)
x[0:64] = 1
X = np.fft.fft(x)
x_hat = np.fft.ifft(X)

plt.stem(np.angle(X));
plt.show();

plt.stem(np.real(x_hat-x));
plt.show();

plt.stem(np.imag(x_hat));
#It can be seen that the magnitude and phase error are minimized while usiing FFT
